{"version":3,"sources":["ModelFBX.tsx","useModelCentering.ts","Spinner.tsx","Scene.tsx","Controls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ModelFBX","modelUrl","textureUrl","model","useLoader","FBXLoader","texture","TextureLoader","object3d","camera","useThree","useEffect","boundingBox","Box3","setFromObject","boundingBoxCenter","Vector3","getCenter","cameraDistance","max","z","min","Math","tan","fov","position","copy","x","centerV","lookAt","negate","useModelCentering","traverse","child","isMesh","material","MeshPhongMaterial","map","skinning","useState","AnimationMixer","mixer","animation","animations","clipAction","play","useFrame","state","delta","update","object","geometry","BoxGeometry","spinnerGeometry","EdgesGeometry","spinnerMaterial","LineBasicMaterial","color","linewidth","Spinner","target","setTarget","spinnerRef","useRef","useFrameCallback","useMemo","current","rotation","ref","cameraSettings","aspect","window","innerWidth","innerHeight","near","far","Scene","Object","assign","set","args","fallback","process","extend","OrbitControls","Controls","gl","domElement","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af3a1667.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLoader, useFrame } from 'react-three-fiber';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\r\nimport { useModelCentering } from './useModelCentering';\r\nimport { TextureLoader, MeshPhongMaterial, AnimationMixer } from 'three';\r\n\r\nconst ModelFBX: React.FC<{ modelUrl: string, textureUrl: string }> =\r\n  ({ modelUrl, textureUrl }) => {\r\n    const model = useLoader(FBXLoader, modelUrl);\r\n    const texture = useLoader(TextureLoader, textureUrl);\r\n\r\n    useModelCentering(model);\r\n\r\n    model.traverse(child => {\r\n      if ((child as THREE.Mesh).isMesh) {\r\n        (child as THREE.Mesh).material = new MeshPhongMaterial({ map: texture, skinning: true });;\r\n      }\r\n    });\r\n\r\n    const [mixer] = useState(() => new AnimationMixer(model))\r\n    useEffect(() => {\r\n      const animation = (model as any).animations[0];\r\n      const action = mixer.clipAction(animation);\r\n      \r\n      action.play();\r\n    }, []);\r\n\r\n    useFrame((state, delta) => {\r\n      mixer.update(delta)\r\n    })\r\n\r\n\r\n    return <primitive object={model} position={[0, 0, 0]} />\r\n  }\r\n\r\nexport { ModelFBX };\r\n","import { useEffect } from 'react';\r\nimport { useThree } from 'react-three-fiber';\r\nimport { Box3, Vector3 } from 'three';\r\n\r\n\r\n\r\nconst useModelCentering = (object3d: THREE.Object3D) => {\r\n  const { camera } = useThree();\r\n  \r\n  useEffect(() => {\r\n    const boundingBox = new Box3().setFromObject(object3d);\r\n    const boundingBoxCenter = new Vector3();\r\n    boundingBox.getCenter(boundingBoxCenter);\r\n\r\n    const cameraDistance = (boundingBox.max.z - boundingBox.min.z) / 2 / Math.tan((camera as THREE.PerspectiveCamera).fov / 2);\r\n\r\n    camera.position.copy(boundingBoxCenter);\r\n    camera.position.x += (cameraDistance * 1.8);\r\n    const centerV = new Vector3(0, 0, 0);\r\n    camera.lookAt(centerV);\r\n    object3d.position.copy(boundingBoxCenter.negate());\r\n  }, [object3d]);\r\n}\r\n\r\nexport { useModelCentering };\r\n\r\n\r\n","import React, { useRef, useState, useMemo } from 'react';\r\nimport { BoxGeometry, LineBasicMaterial, EdgesGeometry } from 'three';\r\nimport { useFrame } from 'react-three-fiber';\r\n\r\nconst boxSize = 5;\r\nconst geometry = new BoxGeometry(boxSize, boxSize, boxSize);\r\nconst spinnerGeometry = new EdgesGeometry(geometry);\r\nconst spinnerMaterial = new LineBasicMaterial({color: 0x6e6e6e, linewidth: 100});\r\n\r\nconst Spinner = () => {\r\n  const [target, setTarget] = useState('up');\r\n  const spinnerRef = useRef<THREE.Mesh>();\r\n  const useFrameCallback = useMemo(() => () => {\r\n    spinnerRef.current!.rotation.z += 0.02;\r\n\r\n    if(target === 'up') {\r\n      spinnerRef.current!.position.z += 0.015;\r\n    }\r\n    if(target === 'down') {\r\n      spinnerRef.current!.position.z -= 0.015;\r\n    }\r\n\r\n    if(spinnerRef.current!.position.z > 1) {\r\n      setTarget('down');\r\n    }\r\n\r\n    if(spinnerRef.current!.position.z < -1) {\r\n      setTarget('up');\r\n    }\r\n  }, [target]);\r\n\r\n  useFrame(useFrameCallback);\r\n\r\n  return (\r\n    <lineSegments\r\n      ref={spinnerRef}\r\n      geometry={spinnerGeometry}\r\n      material={spinnerMaterial}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Spinner };","import React, { Suspense } from 'react';\r\nimport { useThree } from 'react-three-fiber';\r\nimport { ModelFBX } from './ModelFBX';\r\nimport { Spinner } from './Spinner';\r\n\r\nconst cameraSettings = {\r\n  fov: 45,\r\n  aspect: window.innerWidth / window.innerHeight,\r\n  near: 0.1,\r\n  far: 1000,\r\n};\r\n\r\nconst modelUrl = process.env.PUBLIC_URL + '/assets/Dance.fbx';\r\nconst textureUrl = process.env.PUBLIC_URL + '/assets/texture.png';\r\n// const modelUrl = process.env.PUBLIC_URL + '/assets/untitled.fbx';\r\n// const textureUrl = process.env.PUBLIC_URL + '/assets/texture.png';\r\n\r\nconst Scene: React.FC<{}> = () => {\r\n  const { camera } = useThree();\r\n  Object.assign(camera, cameraSettings);\r\n  camera.position.set(10, 10, 7);\r\n  camera.lookAt(0, 0, 0);\r\n\r\n  return (\r\n    <>\r\n      <ambientLight args={[0xffffff, .25]} />\r\n      {/* <axesHelper args={[20]} position={[-150, 50, 100]}/> */}\r\n      <pointLight args={[0xffffff, 1, 500]} position={[-150, 50, 100]}/>\r\n      <pointLight args={[0xffffff, 1, 500]} position={[50, 50, 50]}/>\r\n      <Suspense fallback={<Spinner />}>\r\n        <ModelFBX modelUrl={modelUrl} textureUrl={textureUrl} />\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { Scene };","import React, { useRef } from 'react';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { ReactThreeFiber, extend, useThree, useFrame } from 'react-three-fiber';\r\nextend({ OrbitControls });\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      orbitControls: ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>\r\n    }\r\n  }\r\n}\r\n\r\nconst Controls = () => {\r\n  const ref = useRef<OrbitControls>();\r\n  const { camera, gl } = useThree();\r\n  useFrame(() => ref?.current?.update());\r\n\r\n  return (\r\n    <><orbitControls ref={ref} args={[camera, gl.domElement]} /></>\r\n  );\r\n}\r\n\r\nexport { Controls };","import React from 'react';\r\nimport { Canvas } from 'react-three-fiber';\r\nimport { Scene } from './Scene';\r\nimport { Controls } from './Controls';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Canvas camera={{\r\n      fov: 75,\r\n      near: 0.1,\r\n      far: 10000,\r\n    }}>\r\n      <Controls />\r\n      <Scene />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}